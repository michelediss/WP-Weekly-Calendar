name: Auto Tag & Release (plugin zip)

on:
  push:
    branches: [master]         # esegue ad ogni push su master
  workflow_dispatch:           # avvio manuale opzionale

permissions:
  contents: write              # serve per creare tag e Release

jobs:
  release_only:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (tutti i tag)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Calcola prossimo tag (bump patch)
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          git fetch --tags --force
          LAST_TAG="$(git tag -l 'v[0-9]*' --sort=-v:refname | head -n 1 || true)"
          if [[ -z "$LAST_TAG" ]]; then
            NEXT_TAG="v0.1.0"
          else
            if [[ "$LAST_TAG" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
              MAJOR="${BASH_REMATCH[1]}"; MINOR="${BASH_REMATCH[2]}"; PATCH="${BASH_REMATCH[3]}"
              NEXT_TAG="v${MAJOR}.${MINOR}.$((PATCH+1))"
            else
              echo "Ultimo tag non nel formato vX.Y.Z: $LAST_TAG" >&2; exit 1
            fi
          fi
          echo "tag=$NEXT_TAG" >> "$GITHUB_OUTPUT"
          echo "version=${NEXT_TAG#v}" >> "$GITHUB_OUTPUT"

      - name: Crea e push del tag
        env:
          TAG: ${{ steps.ver.outputs.tag }}
        shell: bash
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag -a "$TAG" -m "ci: release $TAG"
          git push origin "$TAG"

      - name: Definisci variabili build
        id: vars
        shell: bash
        run: |
          set -euo pipefail
          SLUG="wp-weekly-calendar"
          VERSION="${{ steps.ver.outputs.version }}"
          ZIP_NAME="${SLUG}-${VERSION}.zip"   # <- niente nome branch
          echo "slug=${SLUG}" >> "$GITHUB_OUTPUT"
          echo "zip_name=${ZIP_NAME}" >> "$GITHUB_OUTPUT"

      # (opzionale) Composer
      - name: Setup PHP
        if: hashFiles('**/composer.lock') != ''
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          coverage: none

      - name: Composer install (no-dev)
        if: hashFiles('**/composer.lock') != ''
        run: composer install --no-dev --prefer-dist --no-progress --no-interaction

      # (opzionale) Build asset
      - name: Setup Node
        if: hashFiles('**/package.json') != ''
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build assets
        if: hashFiles('**/package.json') != ''
        run: |
          npm ci
          npm run build

      - name: Prepara cartella e ZIP del plugin
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist package "${{ steps.vars.outputs.slug }}"
          git archive --format=tar HEAD | tar -x -C package
          # pulizia base se non usi .gitattributes export-ignore
          rm -rf package/.github package/tests package/node_modules
          # lo zip deve contenere una cartella con lo slug
          cp -a package/. "${{ steps.vars.outputs.slug }}/"
          (cd ./ && zip -r "dist/${{ steps.vars.outputs.zip_name }}" "${{ steps.vars.outputs.slug }}" \
            -x "*.git*" "*/node_modules/*" "*/tests/*" "*/.github/*")

      - name: Crea la GitHub Release e allega lo ZIP
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.ver.outputs.tag }}
          name: WP Weekly Calendar ${{ steps.ver.outputs.version }}
          files: dist/${{ steps.vars.outputs.zip_name }}
          fail_on_unmatched_files: true
          generate_release_notes: true
