name: Auto Tag, Release & Deploy WordPress plugin

on:
  push:
    branches: [master]     # <= il tuo repo usa "master"
    tags: ['v*']           # build+deploy quando arriva un tag v*
  workflow_dispatch:

permissions:
  contents: write          # serve per creare tag e Release

jobs:
  tag:
    # Crea un nuovo tag vX.Y.Z (patch) ad ogni push su master
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (con tutti i tag)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Calcola prossimo tag e pubblicalo
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git fetch --tags --force
          LAST_TAG="$(git tag -l 'v[0-9]*' --sort=-v:refname | head -n 1)"
          if [[ -z "$LAST_TAG" ]]; then
            NEXT_TAG="v0.1.0"
          else
            if [[ "$LAST_TAG" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
              MAJOR="${BASH_REMATCH[1]}"
              MINOR="${BASH_REMATCH[2]}"
              PATCH="${BASH_REMATCH[3]}"
              NEXT_TAG="v${MAJOR}.${MINOR}.$((PATCH+1))"
            else
              echo "Ultimo tag non in formato vX.Y.Z: $LAST_TAG" >&2
              exit 1
            fi
          fi

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git tag -a "$NEXT_TAG" -m "ci: release $NEXT_TAG"
          git push origin "$NEXT_TAG"

  build:
    # Gira solo quando l'evento è un tag v*
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    outputs:
      zip_name: ${{ steps.vars.outputs.zip_name }}
      slug: ${{ steps.vars.outputs.slug }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Vars
        id: vars
        run: |
          SLUG="${{ vars.PLUGIN_SLUG || 'wp-weekly-calendar' }}"
          VERSION="${GITHUB_REF_NAME#v}"
          ZIP_NAME="$SLUG-$VERSION.zip"
          echo "slug=$SLUG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "zip_name=$ZIP_NAME" >> $GITHUB_OUTPUT

      - name: Setup PHP
        if: hashFiles('**/composer.lock') != ''
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          coverage: none

      - name: Composer install (no-dev)
        if: hashFiles('**/composer.lock') != ''
        run: composer install --no-dev --prefer-dist --no-progress --no-interaction

      - name: Setup Node
        if: hashFiles('**/package.json') != ''
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build assets
        if: hashFiles('**/package.json') != ''
        run: |
          npm ci
          npm run build

      - name: Prepara pacchetto
        run: |
          mkdir -p dist package
          git archive --format=tar HEAD | tar -x -C package
          rm -rf package/.github package/tests package/node_modules
          mkdir -p "${{ steps.vars.outputs.slug }}"
          rsync -a package/ "${{ steps.vars.outputs.slug }}/"
          (cd ./ && zip -r "dist/${{ steps.vars.outputs.zip_name }}" "${{ steps.vars.outputs.slug }}" \
            -x "*.git*" "*/node_modules/*" "*/tests/*" "*/.github/*")

      - name: Pubblica Release su GitHub
        uses: softprops/action-gh-release@v2
        with:
          files: dist/${{ steps.vars.outputs.zip_name }}
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Salva artefatto per il deploy
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.vars.outputs.zip_name }}
          path: dist/${{ steps.vars.outputs.zip_name }}
          if-no-files-found: error

# ... (jobs: tag, build invariati)

deploy:
  if: startsWith(github.ref, 'refs/tags/v')
  needs: build
  runs-on: ubuntu-latest
  steps:
    - name: Scarica artefatto
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.build.outputs.zip_name }}
        path: dist

    - name: Estrai zip
      run: unzip "dist/${{ needs.build.outputs.zip_name }}" -d "dist/unzipped"

    # Deploy SFTP con lftp (supporta porta custom)
    - name: Deploy via SFTP (lftp)
      uses: pressidium/lftp-mirror-action@v1
      with:
        host: ${{ secrets.SFTP_HOST }}                  # 34.155.237.151
        port: ${{ secrets.SFTP_PORT }}                  # 55000
        user: ${{ secrets.SFTP_USERNAME }}              # 65c8d3d2c1ac184a28d5ea9c
        pass: ${{ secrets.SFTP_PASSWORD }}              # ****
        localDir:  dist/unzipped/${{ vars.PLUGIN_SLUG || 'wp-weekly-calendar' }}/
        remoteDir: ${{ vars.REMOTE_DIR || '/home/65c8d3d2c1ac184a28d5ea9c/public_html/wp-content/plugins/wp-weekly-calendar' }}/
        # Opzioni consigliate
        onlyNewer: true
        settings: 'sftp:auto-confirm=yes'
        options: '--delete --verbose'                   # elimina sul server ciò che non esiste più in locale
        parallel: 2                                     # trasferimenti paralleli (facoltativo)
